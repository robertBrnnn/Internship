/*
 	Sketch to control midi applications or hardware using a PS/2 keyboard
 	Each key mapped to a specific Midi address
 	When key pressed, it is added to a timed queue with a variable duration
 	Changing defined channel controls different midi instruments i.e. Channel 9 controls percussion specifically by Midi Standard
 	
 	Author: Robert James Brennan, NUI Maynooth
 	
*/

//-----Channel Variables---------//

//#define Channel1
//#define Channel2
//#define Channel3
#define Channel9


//-----Keyboard variables--------//
#include <PS2Keyboard.h>

const int DataPin = 3;
const int IRQpin = 2;

PS2Keyboard keyboard;

//--Note Variables for different specified channel-------//


#ifdef Channel9
int noteOn = 152;
int noteOff = 136;
#endif

#ifdef Channel1 
int noteOn = 144;
int noteOff = 128;
#endif

#ifdef Channel2
int noteOn = 145;
int noteOff = 129;
#endif

#ifdef Channel3
int noteOn = 146;
int noteOff = 130;
#endif


int velocity = 100;

//----- How long a note will last normally-----//

static int noteDuration = 250; // milliseconds


//------Pitch Bend Variables-----//

int pitchbend = 224;

int lsb = 0;

int msb = 0;


//------Setup notes Queue ------//
#define QUEUE_SIZE 16   // Maximum notes all sounding at the same time
static struct {
  long endTime;
  int note;
} noteQueue[QUEUE_SIZE];
static int qHead, qTail, qCount;

//----------Map characters to a midi note---------------------------//

#ifdef Channel9//map percussion sound to key if using channel 9, the persussion channel
static int key2note[256];
static struct {
  int key;
  int note;
} noteMap[] = {
   { '1', 49 },
   { '2', 57 },
   { '3', 51 },
   { '4', 53 },
   { '5', 59 },
   { '6', 60 },
   { '7', 70 },
   { '8', 61 },
   { '9', 71 },
   { '0', 62 },
   { 'q', 43 },
   { 'w', 47 },
   { 'e', 48 },
   { 'r', 50 },
   { 't', 56 },
   { 'y', 72 },
   { 'u', 63 },
   { 'i', 73 },
   { 'o', 64 },
   { 'p', 74 },
   { 'a', 36 },
   { 's', 40 },
   { 'd', 55 },
   { 'f', 42 },
   { 'g', 39 },
   { 'h', 65 },
   { 'j', 75 },
   { 'k', 66 },
   { 'l', 76 },
   { ';', 67 },
   { 'z', 35 },
   { 'x', 37 },
   { 'c', 54 },
   { 'v', 46 },
   { 'b', 58 },
   { 'n', 77 },
   { 'm', 68 },
   { ',', 78 },
   { '.', 69 },
   { '/', 79 },
};
#define NOTE_MAP_SIZE (sizeof(noteMap)/sizeof(noteMap[0]))

#else//if any other channel is defined map pitched notes to corresponding keys


static int key2note[256];
static struct {
  int key;
  int note;
} noteMap[] = {
   { '1', 48 },
   { 'q', 49 },
   { 'a', 50 },
   { 'z', 51 },
   { '2', 52 },
   { 'w', 53 },
   { 's', 54 },
   { 'x', 55 },
   { '3', 56 },
   { 'e', 57 },
   { 'd', 58 },
   { 'c', 59 },
   { '4', 60 },
   { 'r', 61 },
   { 'f', 62 },
   { 'v', 63 },
   { '5', 64 },
   { 't', 65 },
   { 'g', 66 },
   { 'b', 67 },
   { '6', 68 },
   { 'y', 69 },
   { 'h', 70 },
   { 'n', 71 },
   { '7', 72 },
   { 'u', 73 },
   { 'j', 74 },
   { 'm', 75 },
   { '8', 76 },
   { 'i', 77 },
   { 'k', 78 },
   { ',', 79 },
   { '9', 80 },
   { 'o', 81 },
   { 'l', 82 },
   { '.', 83 },
   { '0', 84 },
   { 'p', 85 },
   { ';', 86 },
   { '/', 87 },
};
#define NOTE_MAP_SIZE (sizeof(noteMap)/sizeof(noteMap[0]))

#endif


//-------------Turn Notes Off after time expired---------------------//
static void turnOffNotes(void)
{
  while (qCount) {
    if (((long)millis() - noteQueue[qTail].endTime) >= 0) {
      MIDImessage(noteOff,noteQueue[qTail++].note,velocity);
      if (qTail >= QUEUE_SIZE) qTail=0;
      qCount--;
    } else return;
  }
}


//---------------Queue notes play, and count time--------------//
static void enqueue(int command,int note, int velocity1, int duration)
{
  if (note==0) return;

  if (qCount < QUEUE_SIZE) {
    noteQueue[qHead].note = note;
    noteQueue[qHead++].endTime = millis() + (noteDuration + duration);
    MIDImessage(command,note,velocity1);
    if (qHead >= QUEUE_SIZE) qHead = 0;
    qCount++;
  }
}

//--------------- Midi command message ------------------//

void MIDImessage(int command, int note, int velocity)
{
  Serial.write(command);
  Serial.write(note);
  Serial.write(velocity);
}


//--------------Initialise-------------------//
void setup()
{
  keyboard.begin(DataPin, IRQpin, PS2Keymap_US);//initialise keyboard
  Serial.begin(31250);//start serial
  //Serial.begin(9600);
  
  qHead = qTail = qCount = 0;
  
  for (int i=0 ; i < NOTE_MAP_SIZE; i++) {
    key2note[noteMap[i].key] = noteMap[i].note;
  }
  
  
}

//------Call note check pitchbend check, and turn off notes---------//
void loop()
{
  checkNotes();
  checkButtons(); 
  turnOffNotes();
} 


//-----Read keyboard and play corresponding Note------//
void checkNotes()
{
  
  //buttons
  int durationBttn = 6;
  
  int lessTimeBttn = 8;
  
  int extra = 300;
  
  int less = -150;
  
  pinMode(durationBttn, INPUT);
  pinMode(lessTimeBttn, INPUT);
  
 
  if(keyboard.available())
  {
    int c = key2note[keyboard.read()];
    
    if(digitalRead(durationBttn)==HIGH)
    {
      enqueue(noteOn,c,velocity,extra);//send increased duration
    }
    else if(digitalRead(lessTimeBttn ==HIGH))
    {
      enqueue(noteOn,c,velocity,less);//send decreased duration
    }
    else{//otherwise send norml queue message
      enqueue(noteOn,c,velocity,0);
    }
  }
}


//-----Check pitchbend control buttons, and send pitchbend message---//
void checkButtons()
{
  int pitchUp = 5;
  int pitchDown = 7;
  
  pinMode(pitchUp, INPUT);
  pinMode(pitchDown, INPUT);
  
  if(digitalRead(pitchUp)==HIGH)
  {      
      enqueue(pitchbend, 0 ,64,0);
      for(msb = 64; msb<=127; msb++)
      {
        MIDImessage(pitchbend,lsb, msb);
        delay(10);
      }      
      MIDImessage(pitchbend, 0 ,64);
  }
  else if (digitalRead(pitchDown)==HIGH)
  {
    enqueue(pitchbend, 0 ,64,0);
      for(msb = 64; msb>=0; msb--)
      {
        MIDImessage(pitchbend, lsb, msb);
        delay(10);
      }      
      MIDImessage(pitchbend, 0 , 64);   
  }
  
}
